{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome To Mobile Monetization Pro","text":""},{"location":"index.html#introduction","title":"Introduction","text":"<p>Welcome to Mobile Monetization Pro, the ultimate toolkit designed to help you effortlessly monetize your mobile games. Whether you're a solo developer, part of a small team, or a large studio, Mobile Monetization Pro simplifies the integration of essential monetization features.</p> <p>Mobile Monetization Pro offers a user-friendly, powerful solution for handling in-app purchases (IAPs), ads, and rewards, all from one package. Say goodbye to the headache of managing complex integrations, and say hello to a seamless experience that allows you to focus on what matters most\u2014creating amazing games. </p>"},{"location":"index.html#why-choose-mobile-monetization-pro","title":"Why Choose Mobile Monetization Pro?","text":"<p>Created by developers, for developers, Mobile Monetization Pro was built with ease of use and flexibility in mind. We know the challenges you face when integrating monetization features into your games, and we\u2019ve created the toolkit to solve those challenges.</p> <p>Don't just take our word for it\u2014Mobile Monetization Pro is trusted by hundreds of developers, helping them easily integrate ads, IAPs and more with minimal effort.</p>"},{"location":"index.html#features","title":"\ud83d\ude80 Features","text":""},{"location":"index.html#ads-integration-made-easy","title":"\ud83d\udcb8 Ads Integration Made Easy","text":"<p>Seamlessly integrate the ad networks of your choice into your mobile game with full mediation support:</p> <ul> <li>Admob (Mediation Supported)</li> <li>AppLovin (Mediation Supported)</li> <li>LevelPlay (Mediation Supported)</li> <li>IronSource</li> <li>Unity Ads</li> <li>LiftOff (Vungle)</li> </ul>"},{"location":"index.html#in-app-purchases-iap","title":"\ud83d\udecd\ufe0f In-App Purchases (IAP)","text":"<p>Easily implement IAPs and show product prices in the player\u2019s local currency:</p> <ul> <li>Supports Consumable, Non-Consumable, and Subscription items  </li> <li>Displays IAP prices in local currencies</li> <li>Automatically detects refunds for Non-Consumables and Subscriptions  </li> <li>Resets premium content access when refunded to ensure fair use</li> </ul>"},{"location":"index.html#compliance-ready-gdpr-att","title":"\ud83d\udee1\ufe0f Compliance Ready (GDPR &amp; ATT)","text":"<p>Stay compliant with regional privacy laws:</p> <ul> <li>App Tracking Transparency (ATT) for iOS</li> <li>GDPR Consent using Google UMP SDK</li> </ul>"},{"location":"index.html#cross-promotion-system","title":"\ud83d\udd01 Cross Promotion System","text":"<p>Promote other games in your catalog with built-in cross-promotion tools to drive engagement and revenue.</p>"},{"location":"index.html#user-review-prompt-system","title":"\u2b50 User Review Prompt System","text":"<p>Prompt users to leave reviews for your game, improving visibility and trust on app stores.</p>"},{"location":"index.html#remove-ads-functionality","title":"\u274c Remove Ads Functionality","text":"<p>Give players the option to enjoy an ad-free experience with a simple purchase.</p>"},{"location":"index.html#local-push-notifications","title":"\ud83d\udd14 Local Push Notifications","text":"<p>Customizable notification system built for Unity:</p> <ul> <li>Adjustable repeat cycles (1\u20133)</li> <li>Reset notifications on app launch</li> <li>Schedule unique messages at various intervals</li> <li>Full customization for:</li> <li>Title, subtitle (iOS), and body</li> <li>Small and large icons</li> <li>Improved Android notification channel registration</li> <li>Clear script comments for easy setup</li> </ul>"},{"location":"index.html#remote-push-notifications","title":"\ud83c\udf10 Remote Push Notifications","text":"<p>Send real-time messages with Firebase Cloud Messaging (FCM) integration.</p>"},{"location":"index.html#in-app-update-system-android","title":"\ud83d\udd04 In-App Update System (Android)","text":"<p>Let users update your game from inside the app, without needing to visit the Play Store.</p>"},{"location":"index.html#take-game-screenshots","title":"\ud83d\udcf8 Take Game Screenshots","text":"<p>Capture clean game screenshots directly from the Unity Editor.</p>"},{"location":"index.html#firebase-analytics-integration","title":"\ud83d\udcca Firebase Analytics Integration","text":"<p>Track player behavior and engagement using Firebase Analytics.</p>"},{"location":"index.html#no-internet-connectivity-checker","title":"\ud83c\udf0d No Internet Connectivity Checker","text":"<ul> <li>Show a \"No Internet Connection\" popup when offline  </li> <li>Resume ad display once internet is restored</li> </ul>"},{"location":"index.html#automatically-update-system-properties","title":"\ud83d\udd27 Automatically Update System Properties","text":"<p>Avoid manual errors with auto-updates:</p> <ul> <li>Android:</li> <li>Update <code>AndroidManifest.xml</code> and Gradle properties with one click</li> <li>iOS:</li> <li>Auto-update <code>Info.plist</code> for LevelPlay integration</li> </ul>"},{"location":"index.html#no-coding-required","title":"\ud83e\udde9 No Coding Required","text":"<p>Beginner-friendly! Drag-and-drop workflows let you get started without writing code.</p>"},{"location":"index.html#comprehensive-documentation-tutorials","title":"\ud83d\udcda Comprehensive Documentation &amp; Tutorials","text":"<p>Learn fast with detailed written guides and step-by-step video tutorials.</p>"},{"location":"index.html#supported-advertisers-mediation","title":"\ud83d\udcc8 Supported Advertisers &amp; Mediation","text":"<ul> <li>Admob  </li> <li>AppLovin  </li> <li>LevelPlay  </li> <li>IronSource  </li> <li>Unity Ads  </li> <li>LiftOff (Vungle)</li> </ul>"},{"location":"index.html#supported-ad-types","title":"\ud83d\udee0 Supported Ad Types","text":"<ul> <li>Banner  </li> <li>Interstitial  </li> <li>Rewarded Video  </li> <li>Rewarded Interstitial  </li> <li>App Open  </li> <li>Native</li> </ul>"},{"location":"index.html#supported-platforms","title":"\ud83d\udcf1 Supported Platforms","text":"<ul> <li>Android  </li> <li>iOS</li> </ul>"},{"location":"index.html#thank-you","title":"\ud83d\ude4c Thank You","text":"<p>Thanks for choosing Mobile Monetization Pro!  </p>"},{"location":"AdmobAdsSetup.html","title":"Admob Ads Part-1","text":""},{"location":"AdmobAdsSetup.html#introduction","title":"Introduction","text":"<p>In this video, we take the first step in integrating Admob Ads into your mobile game using Mobile Monetization Pro.</p> <p>You'll learn how to:</p> <ul> <li> <p>Set up your Admob account.</p> </li> <li> <p>Configure Admob SDK in Unity.</p> </li> <li> <p>Integrate and test ads.</p> </li> </ul>"},{"location":"AdmobAdsSetup.html#admob-ads-initializer","title":"Admob Ads Initializer","text":"Fields Info UseGDPRConsentEnable or disable GDPR consent support. AndroidBannerIdAndroid AdMob Banner Ad Unit ID. AndroidInterstitalIdAndroid AdMob Interstitial Ad Unit ID. AndroidRewardedIdAndroid AdMob Rewarded Video Ad Unit ID. AndroidNativeIdAndroid AdMob Native Ad Unit ID. AndroidAppOpenIdAndroid AdMob App Open Ad Unit ID. AndroidRewardedInterstitialIDAndroid AdMob Rewarded Interstitial Ad Unit ID. IOSBannerIdiOS AdMob Banner Ad Unit ID. IOSInterstitalIdiOS AdMob Interstitial Ad Unit ID. IOSRewardedIdiOS AdMob Rewarded Video Ad Unit ID. IOSNativeIdiOS AdMob Native Ad Unit ID. IOSAppOpenIdiOS AdMob App Open Ad Unit ID. IOSRewardedInterstitialIDiOS AdMob Rewarded Interstitial Ad Unit ID. ShowBannerAdsInStartAutomatically show banner ads when the game starts. ChooseBannerPositionChoose where the banner ad should be displayed. UseAdaptiveBannerSizeEnable support for adaptive banners based on screen orientation. UseCustomAdaptiveBannerWidthEnable to manually set the width for adaptive banners. CustomAdaptiveBannerWidthSpecify a custom width for adaptive banners (only used if UseCustomAdaptiveBannerWidth is true). AdaptiveBannerAdSizeOptionsSelect which screen orientations to support for adaptive banners. BannerAdSizeSet the standard banner ad size if adaptive is not used. EnableTimedInterstitalAdsEnable to automatically show interstitial ads after a time interval. InterstitialAdIntervalSecondsTime interval (in seconds) to wait before showing an interstitial ad again. ResetInterstitalAdTimerOnRewardedAdReset interstitial ad timer after showing a interstitial ad. AppOpensToCheckBeforeShowingAppOpenAdNumber of app opens to check before showing an AppOpen Ad. DelayShowAppOpenAdDelay in seconds before showing an AppOpen Ad after the game starts."},{"location":"AdmobAdsSetup.html#admob-ads-manager","title":"Admob Ads Manager","text":"Fields Info DebugAdInspectorEnable or disable the debugging of Ad Inspector. AdInspectorButtonButton to open Ad Inspector for debugging. ShowBannerAdButtonButton to show the banner ad. ImageToUseToDisplayNativeAdImage used to display the native ad. ShowRewardedInterstialIf true, shows a rewarded interstitial ad. RewardedButtonButton associated with the rewarded ad. scriptScript attached to the button that will call the selected function. scriptNameName of the script associated with the button. functionNamesList of function names to call from the script. selectedFunctionIndexIndex of the selected function from the list. ActionButtonsToInvokeInterstitalAdsButtons that trigger the interstitial ads. rewardedButtonsList of buttons that will trigger rewarded ads."},{"location":"AdmobAdsSetup_Part2_Mediation.html","title":"Admob Ads Mediation Part-2","text":""},{"location":"AdmobAdsSetup_Part2_Mediation.html#introduction","title":"Introduction","text":"<p>In this video, we will be integrating Admob Ads Mediation into your mobile game using Mobile Monetization Pro.</p> <p>You'll learn how to:</p> <ul> <li> <p>Set up your Admob account for Mediation.</p> </li> <li> <p>Configure Admob SDK in Unity.</p> </li> <li> <p>Integrate and test ads.</p> </li> </ul>"},{"location":"AdmobAdsSetup_Part2_Mediation.html#admob-ads-initializer","title":"Admob Ads Initializer","text":"Fields Info UseGDPRConsentEnable or disable GDPR consent support. AndroidBannerIdAndroid AdMob Banner Ad Unit ID. AndroidInterstitalIdAndroid AdMob Interstitial Ad Unit ID. AndroidRewardedIdAndroid AdMob Rewarded Video Ad Unit ID. AndroidNativeIdAndroid AdMob Native Ad Unit ID. AndroidAppOpenIdAndroid AdMob App Open Ad Unit ID. AndroidRewardedInterstitialIDAndroid AdMob Rewarded Interstitial Ad Unit ID. IOSBannerIdiOS AdMob Banner Ad Unit ID. IOSInterstitalIdiOS AdMob Interstitial Ad Unit ID. IOSRewardedIdiOS AdMob Rewarded Video Ad Unit ID. IOSNativeIdiOS AdMob Native Ad Unit ID. IOSAppOpenIdiOS AdMob App Open Ad Unit ID. IOSRewardedInterstitialIDiOS AdMob Rewarded Interstitial Ad Unit ID. ShowBannerAdsInStartAutomatically show banner ads when the game starts. ChooseBannerPositionChoose where the banner ad should be displayed. UseAdaptiveBannerSizeEnable support for adaptive banners based on screen orientation. UseCustomAdaptiveBannerWidthEnable to manually set the width for adaptive banners. CustomAdaptiveBannerWidthSpecify a custom width for adaptive banners (only used if UseCustomAdaptiveBannerWidth is true). AdaptiveBannerAdSizeOptionsSelect which screen orientations to support for adaptive banners. BannerAdSizeSet the standard banner ad size if adaptive is not used. EnableTimedInterstitalAdsEnable to automatically show interstitial ads after a time interval. InterstitialAdIntervalSecondsTime interval (in seconds) to wait before showing an interstitial ad again. ResetInterstitalAdTimerOnRewardedAdReset interstitial ad timer after showing a interstitial ad. AppOpensToCheckBeforeShowingAppOpenAdNumber of app opens to check before showing an AppOpen Ad. DelayShowAppOpenAdDelay in seconds before showing an AppOpen Ad after the game starts."},{"location":"AdmobAdsSetup_Part2_Mediation.html#admob-ads-manager","title":"Admob Ads Manager","text":"Fields Info DebugAdInspectorEnable or disable the debugging of Ad Inspector. AdInspectorButtonButton to open Ad Inspector for debugging. ShowBannerAdButtonButton to show the banner ad. ImageToUseToDisplayNativeAdImage used to display the native ad. ShowRewardedInterstialIf true, shows a rewarded interstitial ad. RewardedButtonButton associated with the rewarded ad. scriptScript attached to the button that will call the selected function. scriptNameName of the script associated with the button. functionNamesList of function names to call from the script. selectedFunctionIndexIndex of the selected function from the list. ActionButtonsToInvokeInterstitalAdsButtons that trigger the interstitial ads. rewardedButtonsList of buttons that will trigger rewarded ads."},{"location":"AdmobAdsSetup_Part3.html","title":"Admob Ads Callbacks Part-3","text":""},{"location":"AdmobAdsSetup_Part3.html#introduction","title":"Introduction","text":"<p>In this video, we will learn how to set up AdMob Ads Callbacks in your mobile game using Mobile Monetization Pro.</p>"},{"location":"AdmobAdsSetup_Part3.html#admob-ads-banner-interstitial-callback-event-example","title":"Admob Ads - Banner &amp; Interstitial Callback Event Example","text":"<pre><code>using System.Collections;\nusing UnityEngine;\n\npublic class AdmobAdEvents : MonoBehaviour\n{\n    private MobileMonetizationPro.MobileMonetizationPro_AdmobAdsInitializer admobInitializer;\n\n    private void Start()\n    {\n        admobInitializer = MobileMonetizationPro.MobileMonetizationPro_AdmobAdsInitializer.instance;\n        if (admobInitializer != null)\n        {\n            StartCoroutine(ShowInterstitialAutomatically());\n        }\n        else\n        {\n            Debug.LogWarning(\"AdmobAdsInitializer instance not found!\");\n        }\n    }\n\n    private void OnTriggerEnter(Collider other)\n    {\n        if (other.CompareTag(\"Player\") &amp;&amp; admobInitializer != null)\n        {\n            admobInitializer.HideBanner();\n        }\n    }\n\n    private void OnTriggerExit(Collider other)\n    {\n        if (other.CompareTag(\"Player\") &amp;&amp; admobInitializer != null)\n        {\n            admobInitializer.ShowBanner();\n        }\n    }\n\n    private IEnumerator ShowInterstitialAutomatically()\n    {\n        yield return new WaitForSeconds(5f);\n        if (admobInitializer != null)\n        {\n            admobInitializer.ShowInterstitialAd(true);\n            admobInitializer.ResetInterstitialAdTimer();\n        }\n    }\n}\n</code></pre>"},{"location":"AdmobAdsSetup_Part3.html#admob-ads-rewarded-callback-event-example","title":"Admob Ads - Rewarded Callback Event Example","text":"<pre><code>using UnityEngine;\nusing UnityEngine.SceneManagement;\nusing UnityEngine.UI;\n\npublic class ProgressionBar : MonoBehaviour\n{\n    public Image fillImage;  // Image component to fill\n    public float fillSpeed = 0.1f;  // Speed at which the fill completes\n\n    public Button LoadLevelButton;\n\n    private void Start()\n    {\n        if (fillImage == null)\n        {\n            Debug.LogError(\"Fill Image is not assigned!\");\n            return;  // Exit if no image assigned\n        }\n\n        fillImage.fillAmount = 0f; // Ensure starting from 0\n        StartFilling(); // Start filling normally if assigned\n    } \n    private void Update()\n    {\n        if(MobileMonetizationPro.MobileMonetizationPro_AdmobAdsInitializer.instance.IsRewardedAdCompleted == true)\n        {\n           // give reward\n           LoadLevelButton.gameObject.SetActive(true);\n           MobileMonetizationPro.MobileMonetizationPro_AdmobAdsInitializer.instance.IsRewardedAdCompleted = false;\n        }\n    }\n    public void StartFilling()\n    {\n        StartCoroutine(FillProgressionBar());\n    }\n\n    private System.Collections.IEnumerator FillProgressionBar()\n    {\n        while (fillImage.fillAmount &lt; 1f)\n        {\n            fillImage.fillAmount += fillSpeed * Time.deltaTime;  // Increment fill amount based on time\n            fillImage.fillAmount = Mathf.Clamp01(fillImage.fillAmount); // Clamp to make sure it doesn't overshoot\n            yield return null;  // Wait for next frame\n        }\n\n        // Fill completed\n        Debug.Log(\"Fill Completed!\");\n\n\n         if (MobileMonetizationPro.MobileMonetizationPro_AdmobAdsInitializer.instance != null)\n           MobileMonetizationPro.MobileMonetizationPro_AdmobAdsInitializer.instance.ShowRewardedAd();\n    }\n}\n\n</code></pre>"},{"location":"AndroidSpecificScripts.html","title":"Fix Android Specific Scripts","text":""},{"location":"AndroidSpecificScripts.html#introduction","title":"Introduction","text":"<p>The tutorial focuses on fixing android specific scripts into a Unity project.It highlights issues that may arise when switching platforms from Android to iOS, particularly related to Google Play plugins for in-app updates.</p>"},{"location":"AndroidSpecificScripts.html#identifying-errors-during-platform-switch","title":"Identifying Errors During Platform Switch","text":"<p>When switching the build platform to iOS, errors may appear in the console, specifically related to in-app update scripts that are designed only for Android.</p>"},{"location":"AndroidSpecificScripts.html#solution","title":"Solution","text":"<ul> <li>To resolve the Android-specific script errors, navigate to the Tools menu and select Mobile Monetization Pro &gt; Solutions.</li> <li>Drag and drop the scripts causing issues into the designated area.</li> <li>After dragging and dropping the scripts, convert them to be Android-specific by clicking the provided option.</li> <li>This conversion is crucial to ensure platform compatibility and to resolve the previously encountered errors.</li> <li>Once all the scripts are properly converted, save the scene and the project.</li> </ul>"},{"location":"ApplovinMediationSetup.html","title":"Applovin Ads Mediation Part-2","text":""},{"location":"ApplovinMediationSetup.html#introduction","title":"Introduction","text":"<p>In this video, we will be integrating Applovin Ads Mediation into your mobile game using Mobile Monetization Pro.</p> <p>You'll learn how to:</p> <ul> <li> <p>Set up your Applovin account for Mediation.</p> </li> <li> <p>Configure Applovin SDK in Unity.</p> </li> <li> <p>Integrate and test ads.</p> </li> </ul>"},{"location":"ApplovinMediationSetup.html#applovin-ads-initializer","title":"Applovin Ads Initializer","text":"Fields Info UseGDPRConsent If enabled, the SDK will wait for GDPR consent before initializing ads. SdkKey Your AppLovin MAX SDK Key. Required to initialize the SDK. Android_BannerAdUnitID Banner Ad Unit ID for Android. Android_InterstitalAdUnitID Interstitial Ad Unit ID for Android. Android_RewardedAdUnitID Rewarded Ad Unit ID for Android. IOS_BannerAdUnitID Banner Ad Unit ID for iOS. IOS_InterstitalAdUnitID Interstitial Ad Unit ID for iOS. IOS_RewardedAdUnitID Rewarded Ad Unit ID for iOS. ShowBannerAdsInStart If enabled, banner ads will be shown automatically at the start. ChooseBannerPosition Position on the screen where the banner ad will be displayed. BannerBackgroundColor Background color for the banner ad. EnableTimedInterstitalAds If enabled, interstitial ads will be shown automatically after a timed interval. InterstitialAdIntervalSeconds Time interval (in seconds) after which an interstitial ad will be shown. ResetInterstitalAdTimerOnRewardedAd If enabled, the interstitial ad timer will reset after showing a rewarded ad."},{"location":"ApplovinMediationSetup.html#applovin-ads-manager","title":"Applovin Ads Manager","text":"Fields Info ShowBannerAdButton Button that shows the banner ad when clicked. FunctionInfo.RewardedButton Button that triggers a rewarded ad and invokes a function when the ad is completed. FunctionInfo.script Script containing the function to invoke after ad completion. FunctionInfo.scriptName Name of the selected script. FunctionInfo.functionNames List of function names available in the selected script. FunctionInfo.selectedFunctionIndex Index of the function selected to be called from the list. ActionButtonsToInvokeInterstitalAds Buttons that trigger an interstitial ad when clicked. rewardedButtons Auto-generated list of rewarded buttons associated with functions."},{"location":"ApplovinSetup.html","title":"Applovin Ads Part-1","text":""},{"location":"ApplovinSetup.html#introduction","title":"Introduction","text":"<p>In this video, we take the first step in integrating Applovin Ads into your mobile game using Mobile Monetization Pro.</p> <p>You'll learn how to:</p> <ul> <li> <p>Set up your Applovin account.</p> </li> <li> <p>Configure Applovin SDK in Unity.</p> </li> <li> <p>Integrate and test applovin ads.</p> </li> </ul>"},{"location":"ApplovinSetup.html#applovin-ads-initializer","title":"Applovin Ads Initializer","text":"Fields Info UseGDPRConsent If enabled, the SDK will wait for GDPR consent before initializing ads. SdkKey Your AppLovin MAX SDK Key. Required to initialize the SDK. Android_BannerAdUnitID Banner Ad Unit ID for Android. Android_InterstitalAdUnitID Interstitial Ad Unit ID for Android. Android_RewardedAdUnitID Rewarded Ad Unit ID for Android. IOS_BannerAdUnitID Banner Ad Unit ID for iOS. IOS_InterstitalAdUnitID Interstitial Ad Unit ID for iOS. IOS_RewardedAdUnitID Rewarded Ad Unit ID for iOS. ShowBannerAdsInStart If enabled, banner ads will be shown automatically at the start. ChooseBannerPosition Position on the screen where the banner ad will be displayed. BannerBackgroundColor Background color for the banner ad. EnableTimedInterstitalAds If enabled, interstitial ads will be shown automatically after a timed interval. InterstitialAdIntervalSeconds Time interval (in seconds) after which an interstitial ad will be shown. ResetInterstitalAdTimerOnRewardedAd If enabled, the interstitial ad timer will reset after showing a rewarded ad."},{"location":"ApplovinSetup.html#applovin-ads-manager","title":"Applovin Ads Manager","text":"Fields Info ShowBannerAdButton Button that shows the banner ad when clicked. FunctionInfo.RewardedButton Button that triggers a rewarded ad and invokes a function when the ad is completed. FunctionInfo.script Script containing the function to invoke after ad completion. FunctionInfo.scriptName Name of the selected script. FunctionInfo.functionNames List of function names available in the selected script. FunctionInfo.selectedFunctionIndex Index of the function selected to be called from the list. ActionButtonsToInvokeInterstitalAds Buttons that trigger an interstitial ad when clicked. rewardedButtons Auto-generated list of rewarded buttons associated with functions."},{"location":"CrossPromotion.html","title":"Cross-Promotion","text":""},{"location":"CrossPromotion.html#introduction","title":"Introduction","text":"<p>The tutorial focuses on implementing Cross-Promotion within a game, providing step-by-step instructions on how to set it up.</p>"},{"location":"CrossPromotion.html#cross-promo-script","title":"Cross-Promo Script","text":"Fields Info ChooseCrossPromoType Select the type of cross-promotion to display. videoPlayer Video player component used to play video cross-promotions. ChooseDisplayOption Choose how to display the sprites. RawImageComponent RawImage component for displaying video or image. RenderTextureComponent Render texture component for the video player. ImageComponent Image component for displaying image cross-promotions. AddVideos List of video cross-promotions to display. AddSprites List of image cross-promotions to display. DecideWhenToShowNextPromo Determine when the next promo should be displayed. NoOfAppOpensToCheckBeforeNewPromo Number of app opens to check before showing a new cross-promotion. NoOfSessionsToCheckBeforeNewPromo Number of sessions to check before showing a new cross-promotion. MinTimeToWaitBeforeChangingPromo Minimum time (in seconds) to wait before changing the cross-promotion. MaxTimeToWaitBeforeChangingPromo Maximum time (in seconds) to wait before changing the cross-promotion. StopCrossPromotionAfterClick If true, stop cross-promotion after the user clicks. CrossPromotionToDeactive GameObject to deactivate when cross-promotion ends."},{"location":"CrossPromotion.html#cross-promo-manager-script","title":"Cross-Promo Manager Script","text":""},{"location":"FirebaseAnalytics.html","title":"Firebase Analytics","text":""},{"location":"FirebaseAnalytics.html#introduction","title":"Introduction","text":"<p>The tutorial focuses on integrating Firebase Analytics into a Unity project.</p>"},{"location":"FirebaseAnalytics.html#creating-a-firebase-project","title":"Creating a Firebase Project","text":"<ul> <li>Users need to create a new Firebase project by clicking on the \"Add Project\" option.</li> <li>As an example - project is named \"Size Shift\", and users are instructed to enable Google Analytics for the project before proceeding.</li> <li>After selecting their Google account, users complete the project creation process by clicking \"Create Project\" and then \"Continue\".</li> </ul>"},{"location":"FirebaseAnalytics.html#registering-the-unity-app","title":"Registering the Unity App","text":"<ul> <li>Next, users must register their Unity application as an Unity Android app within the Firebase console.</li> <li>To do this, they need to enter the package name from their Unity project settings and provide an app nickname, which is example - \"Size Shift\".</li> <li>Once registered, users are prompted to download the Google services JSON file, which must be correctly placed in their Unity project directory.</li> </ul>"},{"location":"FirebaseAnalytics.html#downloading-and-installing-firebase-sdk","title":"Downloading and Installing Firebase SDK","text":"<ul> <li>Users are instructed to download the Firebase Unity SDK and extract the contents of the zip file.</li> <li>After extraction, the Firebase Analytics Unity package should be imported into the Unity project by dragging and dropping it into the project window.</li> </ul>"},{"location":"FirebaseAnalytics.html#configuring-firebase-in-unity","title":"Configuring Firebase in Unity","text":"<ul> <li>Within Unity, users must navigate to the Tools menu and select the Mobile Monetization Pro integration tool to choose Firebase Analytics.</li> <li>After confirming that the Firebase SDK is installed, users need to click on \"Import Required Scripts\" and close the integration window.</li> <li>They need to create an empty game object named \"Firebase Analytics\" and drag the Firebase initializer script into it.</li> </ul>"},{"location":"FirebaseAnalytics.html#resolving-errors-during-integration","title":"Resolving Errors During Integration","text":"<ul> <li>Upon entering play mode, users may encounter an error indicating that the Firebase CPP bundle cannot be opened due to verification issues.</li> <li>To resolve this, users need to adjust their system settings by navigating to Security and allowing the Firebase CPP app [As shown in the video above].</li> <li>After allowing the app, users can exit play mode, clear the console, and re-enter play mode to verify successful integration.</li> </ul>"},{"location":"FirebaseAnalytics.html#firebase-analytics-initializer-script","title":"Firebase Analytics Initializer Script","text":""},{"location":"FixWin32Exception.html","title":"Fix Win32 Exception Error","text":""},{"location":"FixWin32Exception.html#introduction","title":"Introduction","text":"<p>This tutorial explains how to fix the Win32 Exception error that can occur when importing the LevelPlay SDK into your project. The process begins by clicking on Assets and accessing the Mobile Dependency Resolver (specifically for Android). When you click Resolve, you may encounter a Win32 Exception error that must be fixed before you can proceed with your project.</p>"},{"location":"FixWin32Exception.html#steps-to-resolve-the-win32-exception-error","title":"Steps to Resolve the Win32 Exception Error","text":"<ul> <li> <p>First, clear the console to ensure a fresh start.</p> </li> <li> <p>Then, go to the Tools menu, select Mobile Monetization Pro, and choose Solutions.</p> </li> <li> <p>In this menu, click on the option to Fix Win32 Error, which will open a new window with further instructions.</p> </li> </ul>"},{"location":"FixWin32Exception.html#navigating-the-fix-procedure","title":"Navigating the Fix Procedure","text":"<ul> <li> <p>In the fix window, click Browse, and select the Temp folder, followed by the Play Services Resolver folder, as demonstrated in the video above.</p> </li> <li> <p>Once you\u2019ve selected the correct folder, click the Fix Win32 Error button to begin resolving the issue.</p> </li> <li> <p>This action will create a gradle file in a specified location, which is crucial for the next steps.</p> </li> </ul>"},{"location":"FixWin32Exception.html#finalizing-the-resolution-process","title":"Finalizing the Resolution Process","text":"<ul> <li>After the fix is applied, right-click anywhere inside the Project window and select Reimport All to complete the process.</li> </ul>"},{"location":"GetStartedWithMobileMonetizationPro.html","title":"Welcome To Mobile Monetization Pro","text":""},{"location":"GetStartedWithMobileMonetizationPro.html#introduction","title":"Introduction","text":"<p>Welcome to Mobile Monetization Pro, the ultimate toolkit designed to help you effortlessly monetize your mobile games. Whether you're a solo developer, part of a small team, or a large studio, Mobile Monetization Pro simplifies the integration of essential monetization features.</p> <p>Mobile Monetization Pro offers a user-friendly, powerful solution for handling in-app purchases (IAPs), ads, and rewards, all from one package. Say goodbye to the headache of managing complex integrations, and say hello to a seamless experience that allows you to focus on what matters most\u2014creating amazing games. </p>"},{"location":"GetStartedWithMobileMonetizationPro.html#why-choose-mobile-monetization-pro","title":"Why Choose Mobile Monetization Pro?","text":"<p>Created by developers, for developers, Mobile Monetization Pro was built with ease of use and flexibility in mind. We know the challenges you face when integrating monetization features into your games, and we\u2019ve created the toolkit to solve those challenges.</p> <p>Don't just take our word for it\u2014Mobile Monetization Pro is trusted by hundreds of developers, helping them easily integrate ads, IAPs and more with minimal effort.</p>"},{"location":"GetStartedWithMobileMonetizationPro.html#features","title":"\ud83d\ude80 Features","text":""},{"location":"GetStartedWithMobileMonetizationPro.html#ads-integration-made-easy","title":"\ud83d\udcb8 Ads Integration Made Easy","text":"<p>Seamlessly integrate the ad networks of your choice into your mobile game with full mediation support:</p> <ul> <li>Admob (Mediation Supported)</li> <li>AppLovin (Mediation Supported)</li> <li>LevelPlay (Mediation Supported)</li> <li>IronSource</li> <li>Unity Ads</li> <li>LiftOff (Vungle)</li> </ul>"},{"location":"GetStartedWithMobileMonetizationPro.html#in-app-purchases-iap","title":"\ud83d\udecd\ufe0f In-App Purchases (IAP)","text":"<p>Easily implement IAPs and show product prices in the player\u2019s local currency:</p> <ul> <li>Supports Consumable, Non-Consumable, and Subscription items  </li> <li>Displays IAP prices in local currencies</li> <li>Automatically detects refunds for Non-Consumables and Subscriptions  </li> <li>Resets premium content access when refunded to ensure fair use</li> </ul>"},{"location":"GetStartedWithMobileMonetizationPro.html#compliance-ready-gdpr-att","title":"\ud83d\udee1\ufe0f Compliance Ready (GDPR &amp; ATT)","text":"<p>Stay compliant with regional privacy laws:</p> <ul> <li>App Tracking Transparency (ATT) for iOS</li> <li>GDPR Consent using Google UMP SDK</li> </ul>"},{"location":"GetStartedWithMobileMonetizationPro.html#cross-promotion-system","title":"\ud83d\udd01 Cross Promotion System","text":"<p>Promote other games in your catalog with built-in cross-promotion tools to drive engagement and revenue.</p>"},{"location":"GetStartedWithMobileMonetizationPro.html#user-review-prompt-system","title":"\u2b50 User Review Prompt System","text":"<p>Prompt users to leave reviews for your game, improving visibility and trust on app stores.</p>"},{"location":"GetStartedWithMobileMonetizationPro.html#remove-ads-functionality","title":"\u274c Remove Ads Functionality","text":"<p>Give players the option to enjoy an ad-free experience with a simple purchase.</p>"},{"location":"GetStartedWithMobileMonetizationPro.html#local-push-notifications","title":"\ud83d\udd14 Local Push Notifications","text":"<p>Customizable notification system built for Unity:</p> <ul> <li>Adjustable repeat cycles (1\u20133)</li> <li>Reset notifications on app launch</li> <li>Schedule unique messages at various intervals</li> <li>Full customization for:</li> <li>Title, subtitle (iOS), and body</li> <li>Small and large icons</li> <li>Improved Android notification channel registration</li> <li>Clear script comments for easy setup</li> </ul>"},{"location":"GetStartedWithMobileMonetizationPro.html#remote-push-notifications","title":"\ud83c\udf10 Remote Push Notifications","text":"<p>Send real-time messages with Firebase Cloud Messaging (FCM) integration.</p>"},{"location":"GetStartedWithMobileMonetizationPro.html#in-app-update-system-android","title":"\ud83d\udd04 In-App Update System (Android)","text":"<p>Let users update your game from inside the app, without needing to visit the Play Store.</p>"},{"location":"GetStartedWithMobileMonetizationPro.html#take-game-screenshots","title":"\ud83d\udcf8 Take Game Screenshots","text":"<p>Capture clean game screenshots directly from the Unity Editor.</p>"},{"location":"GetStartedWithMobileMonetizationPro.html#firebase-analytics-integration","title":"\ud83d\udcca Firebase Analytics Integration","text":"<p>Track player behavior and engagement using Firebase Analytics.</p>"},{"location":"GetStartedWithMobileMonetizationPro.html#no-internet-connectivity-checker","title":"\ud83c\udf0d No Internet Connectivity Checker","text":"<ul> <li>Show a \"No Internet Connection\" popup when offline  </li> <li>Resume ad display once internet is restored</li> </ul>"},{"location":"GetStartedWithMobileMonetizationPro.html#automatically-update-system-properties","title":"\ud83d\udd27 Automatically Update System Properties","text":"<p>Avoid manual errors with auto-updates:</p> <ul> <li>Android:</li> <li>Update <code>AndroidManifest.xml</code> and Gradle properties with one click</li> <li>iOS:</li> <li>Auto-update <code>Info.plist</code> for LevelPlay integration</li> </ul>"},{"location":"GetStartedWithMobileMonetizationPro.html#no-coding-required","title":"\ud83e\udde9 No Coding Required","text":"<p>Beginner-friendly! Drag-and-drop workflows let you get started without writing code.</p>"},{"location":"GetStartedWithMobileMonetizationPro.html#comprehensive-documentation-tutorials","title":"\ud83d\udcda Comprehensive Documentation &amp; Tutorials","text":"<p>Learn fast with detailed written guides and step-by-step video tutorials.</p>"},{"location":"GetStartedWithMobileMonetizationPro.html#supported-advertisers-mediation","title":"\ud83d\udcc8 Supported Advertisers &amp; Mediation","text":"<ul> <li>Admob  </li> <li>AppLovin  </li> <li>LevelPlay  </li> <li>IronSource  </li> <li>Unity Ads  </li> <li>LiftOff (Vungle)</li> </ul>"},{"location":"GetStartedWithMobileMonetizationPro.html#supported-ad-types","title":"\ud83d\udee0 Supported Ad Types","text":"<ul> <li>Banner  </li> <li>Interstitial  </li> <li>Rewarded Video  </li> <li>Rewarded Interstitial  </li> <li>App Open  </li> <li>Native</li> </ul>"},{"location":"GetStartedWithMobileMonetizationPro.html#supported-platforms","title":"\ud83d\udcf1 Supported Platforms","text":"<ul> <li>Android  </li> <li>iOS</li> </ul>"},{"location":"GetStartedWithMobileMonetizationPro.html#thank-you","title":"\ud83d\ude4c Thank You","text":"<p>Thanks for choosing Mobile Monetization Pro!  </p>"},{"location":"InAppUpdate.html","title":"In App Update","text":""},{"location":"InAppUpdate.html#introduction","title":"Introduction","text":"<p>The video begins with an overview of the process of integrating In-App updates for Android applications.</p>"},{"location":"InAppUpdate.html#downloading-the-unity-package","title":"Downloading the Unity Package","text":"<ul> <li>The first step involves navigating to the tools section within the mobile monetization pro integration tool.</li> <li>Users are instructed to select the in-app update integration option and to download the latest Android in-app update Unity package.</li> <li>After downloading, the package must be installed in the Unity project.</li> </ul>"},{"location":"InAppUpdate.html#importing-required-packages","title":"Importing Required Packages","text":"<ul> <li>Once the Unity package is installed, the next step is to import required scripts into the project.</li> <li>If the external dependency manager is already present, users can skip its installation and proceed to import the Google Play plugins along with the in-app update.</li> </ul>"},{"location":"InAppUpdate.html#setting-up-the-in-app-update-manager","title":"Setting Up the In-App Update Manager","text":"<ul> <li>The next step involves creating an empty game object, named in-app update, within the Unity hierarchy.</li> <li>Users should reset the transform of this game object and then drag and drop the in-app update manager script onto it.</li> <li>After setting up the manager script, the project is ready for testing on a real Android device.</li> </ul>"},{"location":"InAppUpdate.html#configuring-project-settings","title":"Configuring Project Settings","text":"<ul> <li>Before testing, it is essential to configure the project settings, specifically the version and bundle version code.</li> <li>Users are advised to ensure that the package name and game name are correctly set before proceeding to the Google Play Console.</li> </ul>"},{"location":"InAppUpdate.html#creating-a-release-in-google-play-console","title":"Creating a Release in Google Play Console","text":"<ul> <li>The video guides users to access the Google Play dashboard where a test environment has already been prepared.</li> <li>Users should create a new release and uploading the new bundle.</li> </ul>"},{"location":"InAppUpdate.html#testing-the-in-app-update","title":"Testing the In-App Update","text":"<ul> <li>To test the in-app update functionality, a new version of the game must be uploaded to the Google Play Console.</li> <li>The version number should be updated, and release notes should be added for clarity before publishing.</li> <li>Once published, users can begin testing the update feature by opening the game and observing the update notification.</li> </ul>"},{"location":"InAppUpdate.html#in-app-update-script","title":"In App Update Script","text":""},{"location":"LevelPlayAdsCallbacks.html","title":"LevelPlay Ads Callbacks Part-2","text":""},{"location":"LevelPlayAdsCallbacks.html#introduction","title":"Introduction","text":"<p>In this video, we will learn how to set up LevelPlay Ads Callbacks in your mobile game using Mobile Monetization Pro.</p>"},{"location":"LevelPlayAdsCallbacks.html#levelplay-ads-banner-interstitial-callback-event-example","title":"LevelPlay Ads - Banner &amp; Interstitial Callback Event Example","text":"<pre><code>using System.Collections;\nusing UnityEngine;\n\npublic class LevelPlayAdEventsExample : MonoBehaviour\n{\n    private MobileMonetizationPro.MobileMonetizationPro_LevelPlayInitializer LevelPlayInitializer;\n\n    private void Start()\n    {\n        LevelPlayInitializer = MobileMonetizationPro.MobileMonetizationPro_LevelPlayInitializer.instance;\n        StartCoroutine(ShowInterstitialAutomatically());\n    }\n    private void OnTriggerEnter(Collider other)\n    {\n        if (other.CompareTag(\"Player\") &amp;&amp; LevelPlayInitializer != null)\n        {\n            LevelPlayInitializer.HideBannerAd();\n        }\n    }\n\n    private void OnTriggerExit(Collider other)\n    {\n        if (other.CompareTag(\"Player\") &amp;&amp; LevelPlayInitializer != null)\n        {\n            LevelPlayInitializer.ShowBannerAd();\n        }\n    }\n\n    private IEnumerator ShowInterstitialAutomatically()\n    {     \n        yield return new WaitForSeconds(10f);\n        if (LevelPlayInitializer != null)\n        {\n            LevelPlayInitializer.ShowInterstitial(true);\n            LevelPlayInitializer.ResetInterstitialAdTimer();\n        }\n    }\n}\n</code></pre>"},{"location":"LevelPlayAdsCallbacks.html#levelplay-ads-rewarded-callback-event-example","title":"LevelPlay Ads - Rewarded Callback Event Example","text":"<pre><code>using UnityEngine;\nusing UnityEngine.SceneManagement;\nusing UnityEngine.UI;\n\npublic class ProgressionBar : MonoBehaviour\n{\n    public Image fillImage;  // Image component to fill\n    public float fillSpeed = 0.1f;  // Speed at which the fill completes\n\n    public Button LoadLevelButton;\n\n    private void Start()\n    {\n        if (fillImage == null)\n        {\n            Debug.LogError(\"Fill Image is not assigned!\");\n            return;  // Exit if no image assigned\n        }\n\n        fillImage.fillAmount = 0f; // Ensure starting from 0\n        StartFilling(); // Start filling normally if assigned\n    } \n    private void Update()\n    {\n\n        if (MobileMonetizationPro.MobileMonetizationPro_LevelPlayInitializer.instance.IsRewardedAdCompleted == true)\n        {\n            // give reward\n            LoadLevelButton.gameObject.SetActive(true);\n            MobileMonetizationPro.MobileMonetizationPro_LevelPlayInitializer.instance.IsRewardedAdCompleted = false;\n        }\n    }\n    public void StartFilling()\n    {\n        StartCoroutine(FillProgressionBar());\n    }\n\n    private System.Collections.IEnumerator FillProgressionBar()\n    {\n        while (fillImage.fillAmount &lt; 1f)\n        {\n            fillImage.fillAmount += fillSpeed * Time.deltaTime;  // Increment fill amount based on time\n            fillImage.fillAmount = Mathf.Clamp01(fillImage.fillAmount); // Clamp to make sure it doesn't overshoot\n            yield return null;  // Wait for next frame\n        }\n\n        // Fill completed\n        Debug.Log(\"Fill Completed!\");\n\n\n        if (MobileMonetizationPro.MobileMonetizationPro_LevelPlayInitializer.instance != null)\n            MobileMonetizationPro.MobileMonetizationPro_LevelPlayInitializer.instance.ShowRewarded();\n    }\n}\n</code></pre>"},{"location":"LevelPlayAdsSetup.html","title":"LevelPlay Ads Setup Part-1","text":""},{"location":"LevelPlayAdsSetup.html#introduction","title":"Introduction","text":"<p>In this video, you'll learn how to integrate LevelPlay ads into your Unity mobile game. We will cover the following key concepts:</p> <ul> <li>Setting up LevelPlay: Learn how to create an account and set up your project in LevelPlay.</li> <li>Integrating LevelPlay SDK: A step-by-step guide on adding the LevelPlay SDK to your Unity project.</li> <li>Ad formats: Understand the different types of ads available (banner ads, interstitials, rewarded videos) and how to implement each one.</li> <li>Testing on android and iOS: We will test the game on both Android and iOS device.</li> </ul> <p>By the end of the video, you'll have a fully functional ad setup in your game.</p>"},{"location":"LevelPlayAdsSetup.html#levelplay-ads-initializer","title":"LevelPlay Ads Initializer","text":"Fields Info UseGDPRConsentFlag to indicate whether to use GDPR consent before loading ads. AndroidAppKeyThe app key for the Android platform. AndroidBannerAdUnitIDThe ad unit ID for displaying banner ads on Android. AndroidInterstitialAdUnitIdThe ad unit ID for displaying interstitial ads on Android. AndroidRewardedAdUnitIdThe ad unit ID for displaying rewarded ads on Android. iOSAppKeyThe app key for the iOS platform. iOSBannerAdUnitIDThe ad unit ID for displaying banner ads on iOS. iOSInterstitialAdUnitIdThe ad unit ID for displaying interstitial ads on iOS. iOSRewardedAdUnitIdThe ad unit ID for displaying rewarded ads on iOS. ShowBannerAdsInStartFlag to indicate whether to show banner ads at the start of the game. EnableTimedInterstitalAdsFlag to indicate whether interstitial ads should be shown after a time interval. InterstitialAdIntervalSecondsThe interval duration in seconds to wait before showing a timed interstitial ad. ResetInterstitalAdTimerOnRewardedAdFlag to indicate whether the interstitial ad timer should be reset when a rewarded ad is shown."},{"location":"LevelPlayAdsSetup.html#levelplay-ads-manager","title":"LevelPlay Ads Manager","text":"Fields Info ShowBannerAdButtonButton to show banner ad when clicked. RewardedButtonButton to show rewarded video when clicked. scriptScript that contains the functions to be invoked. scriptNameName of the script associated with the functions. functionNamesList of function names that can be invoked from the script. selectedFunctionIndexIndex of the currently selected function to invoke. UIButtonsToShowInterstitalAdsList of buttons that show interstitial ads when clicked. rewardedButtonsList of rewarded buttons that trigger rewarded video ads."},{"location":"LocalNotifications.html","title":"Local Notifications","text":""},{"location":"LocalNotifications.html#introduction","title":"Introduction","text":"<p>The tutorial focuses on integrating Mobile Notifications into a Unity project, providing step-by-step instructions to achieve this.</p>"},{"location":"LocalNotifications.html#installing-mobile-notifications","title":"Installing Mobile Notifications","text":"<ul> <li>Users are instructed to install mobile notifications through the Unity Package Manager.</li> <li>To find the mobile notifications package, users should search for 'mobile notifications' in the Unity Registry and click on 'Install' after selecting the appropriate   package.</li> <li>Once installed, users should close the Package Manager and import the necessary scripts for the mobile notifications.</li> </ul>"},{"location":"LocalNotifications.html#configuring-project-settings","title":"Configuring Project Settings","text":"<ul> <li>After importing the scripts, users need to navigate to the Project Settings and select the Mobile Notifications section.</li> <li>Icons for notifications must be added, starting with the small icon, which users can drag and drop from the Mobile Monetization Pro UI icon section.</li> <li>It is essential to ensure that the 'Read and Write' option is checked for the icons before applying the changes.</li> <li>Users are also guided to add a large icon by clicking the plus sign, choosing an image, and ensuring the read and write option is also selected for this icon.</li> </ul>"},{"location":"LocalNotifications.html#ios-notification-setup","title":"iOS Notification Setup","text":"<ul> <li>For iOS setup, users must check the 'Request Authorization on App Launch' option and enable push notifications.</li> </ul>"},{"location":"LocalNotifications.html#creating-notification-objects","title":"Creating Notification Objects","text":"<ul> <li>Users are instructed to create an empty GameObject named 'Mobile Notifications' within the hierarchy.</li> <li>They should then navigate to the folder - Mobile Monetization Pro &lt; Tools &lt; Mobile Notification Manager and drag the relevant script onto this GameObject.</li> <li>In this section, users can set the notification title, description, and subtitle, with examples provided for clarity.</li> <li>The tutorial emphasizes selecting a notification receiving time, which can be set in seconds, minutes, hours, or days.</li> </ul>"},{"location":"LocalNotifications.html#finalizing-notification-setup","title":"Finalizing Notification Setup","text":"<ul> <li>Users are reminded to input the same icon names used in project settings into the notification setup to ensure consistency.</li> <li>Once all settings are configured, the mobile notification setup is complete, allowing users to proceed to build their project for Android.</li> </ul>"},{"location":"LocalNotifications.html#local-notifications-script","title":"Local Notifications Script","text":"Fields Info DebugTextForiOS Assign a TextMeshProUGUI component here to display debug messages specifically for iOS notification behavior during development. (Optional) NotificationCycle Specifies how many times the full notification schedule should loop after completing once. Example: If set to 2, the notifications will repeat twice after the first full cycle. ResetNotificationsWhenGameStart Enable this to reset and re-schedule notifications every time the player starts the game. Disable to continue the original notification schedule without resetting. NotificationSetup List of notifications to schedule. Each entry defines its title, description, delay time, and icons. AboutNotification Define the title, body text, and optional subtitle (for iOS) for this notification. NotificationRecievingTime Set the delay after which this notification should appear. You can specify days, hours, minutes, and seconds. NotificationIcons Assign custom small and large icons for this notification on Android. NotificationTitle The title text displayed on the notification. NotificationDescription The main body text of the notification. NotificationSubTitleForIOS A subtitle for the notification (used only on iOS devices). Days Delay in days before this notification is triggered. Hours Delay in hours before this notification is triggered. Minutes Delay in minutes before this notification is triggered. Seconds Delay in seconds before this notification is triggered. SmallIconName The name of the small icon file (must exist in the Android project Resources). LargeIconName The name of the large icon file (must exist in the Android project Resources). <p>\ud83d\udd11 Key Notes:</p> <ul> <li>\ud83d\udcf1 Notification Grouping on Android: Android may group notifications if you send too many in a short period. Make sure to space them out properly.</li> <li>\ud83d\udce6 Notification Bundles: Newer Android versions may group related notifications into \"bundles\" to improve the user experience.</li> <li>\u23f3 Notification Channel Registration: The player must play the game for at least 20 seconds after installation to properly register notification channels.</li> <li>\ud83d\udeab Notification Limitations: Notifications cannot run indefinitely. Once the last scheduled notification fires, they will not restart automatically unless rescheduled.</li> <li>\ud83d\udd04 Notification Reset Option: Enable reset to start the notification cycle again when the player opens the game. Otherwise, notifications continue until the set cycle limit is reached.</li> <li>\ud83d\udd01 Sequential Notifications: Notifications are sent one after the other based on the scheduled time intervals.</li> <li>\ud83d\udee0\ufe0f Understanding Loop Notifications: Unity schedules notifications when the app is running. Even if the app is closed, scheduled notifications will fire. However, scheduling too many notifications may consume more memory and battery \u2014 keep loop counts low (preferably 1\u20132) for best performance.</li> </ul>"},{"location":"NoInternetChecks.html","title":"Internet Connectivity Check","text":""},{"location":"NoInternetChecks.html#introduction","title":"Introduction","text":"<p>In this video, you'll learn how to integrate Rate Game Popup into your Unity mobile game. We will cover the following key concepts:</p> <ul> <li> <p>Setting up a No internet connectivity checker script for a game, which alerts players when they lose internet connection.</p> </li> <li> <p>When the player is disconnected, a message indicating no internet connection is displayed.</p> </li> <li> <p>Once the player reconnects to the internet, a custom function can be triggered to reinitialize the SDK and reload ads in the game.</p> </li> </ul>"},{"location":"NoInternetChecks.html#creating-the-no-internet-connectivity-popup","title":"Creating the No Internet Connectivity Popup","text":"<ul> <li>To implement the no internet connectivity checker, an empty game object is created and named accordingly.</li> <li>The transform of this game object is reset, and a component called 'internet connectivity check' is added to perform the connectivity checks.</li> </ul>"},{"location":"NoInternetChecks.html#displaying-the-no-internet-popup","title":"Displaying the No Internet Popup","text":"<ul> <li>A no internet connection popup is created within the canvas and is activated when the player loses internet connectivity.</li> <li>This popup is initially set to be deactivated and is linked to the game object to display the appropriate message when needed.</li> <li>The functionality includes defining actions that occur when the player reconnects to the internet, such as re-enabling ads in the game.</li> <li>Custom functions can be called by dragging the relevant MonoBehaviour script into the setup and selecting the desired method to invoke.</li> </ul>"},{"location":"NoInternetChecks.html#building-and-testing-the-game","title":"Building and Testing the Game","text":"<ul> <li>After setting up the connectivity checker script.</li> <li>Build and run on an Android device, where it is confirmed that no ads are displayed when there is no internet connection.</li> <li>Upon connecting to Wi-Fi, the game successfully displays ads, demonstrating that the reinitialization works as intended.</li> </ul>"},{"location":"NoInternetChecks.html#internet-connectivity-check_1","title":"Internet Connectivity Check","text":"Fields Info TimeScaleWhenInternet Time scale when the internet connection is active (1 = normal speed). TimeScaleWhenNoInternet Time scale when there is no internet connection (0 = paused). NoInternetConnectionGameObject The GameObject to display when there is no internet connection. scriptWithFunction The MonoBehaviour script that contains the method to invoke when internet is restored. methodName The name of the method to invoke from the scriptWithFunction when internet is restored."},{"location":"RateGame.html","title":"Rate Game Popup","text":""},{"location":"RateGame.html#introduction","title":"Introduction","text":"<p>In this video, you'll learn how to integrate Rate Game Popup into your Unity mobile game. We will cover the following key concepts:</p> <ul> <li> <p>Native Android Rate Game Popup: Learn how to create and display a native Android rate popup directly within your game.</p> </li> <li> <p>iOS Native Rate Game Popup: Follow a step-by-step guide to setting up a native iOS rate popup in your Unity project.</p> </li> <li> <p>Custom Rate Game Popup Formats: Option for customizable popup and how to implement.</p> </li> <li> <p>Testing on Android and iOS: See how to test the Rate Game Popup on real Android and iOS devices to ensure everything works perfectly.</p> </li> </ul>"},{"location":"RateGame.html#user-rate-game-popup","title":"User Rate Game Popup","text":"Fields Info UseNativeAndroidReviewPopUp Determines whether to use the native Android review popup for rating. UseNativeIosReviewPopUp Determines whether to use the native iOS review popup for rating. LinkToTheGameAndroid Link to the game on the Android store for users to open. LinkToTheGameIOS Link to the game on the iOS App Store for users to open. Options Determines the launch condition for showing the review popup: <ul> <li>UseAppOpenCounts \u2014 Use the app open counts to determine when to show the review popup.</li> <li>UseSessionCounts \u2014 Use session counts to determine when to show the review popup.</li> </ul> LaunchCountsBeforeShowingPopup Number of times the game should be opened before showing the review popup. CustomReviewPopup Custom review popup UI GameObject. CustomRateUIButton Custom button to rate the game. CustomLaterUIButton Custom button to dismiss the review prompt. StarRatingsByDefault Default star rating value to be displayed. StarColor Color used to change the star ratings. CustomStars Array of custom star GameObjects to show the rating system. StarSprite Sprite to be activated when a star is clicked."},{"location":"RemoteNotifications.html","title":"Remote Notifications","text":""},{"location":"RemoteNotifications.html#introduction","title":"Introduction","text":"<p>The tutorial focuses on adding an Remote Notifications using Firebase for both Android and iOS devices.It is essential to ensure that the platform is set to iOS before proceeding with the integration steps.</p>"},{"location":"RemoteNotifications.html#creating-a-firebase-project","title":"Creating a Firebase Project","text":"<ul> <li>The first step involves visiting the Firebase console at console.firebase.google.com to create a new Firebase project.</li> <li>Users are instructed to click on the 'Create a Firebase project' button and provide a project name, such as 'test game 2'.</li> <li>After naming the project, users should click 'Continue' and select their Google Analytics account before finalizing the project creation.</li> </ul>"},{"location":"RemoteNotifications.html#registering-apps-in-firebase","title":"Registering Apps in Firebase","text":"<ul> <li>Once the Firebase project is created, users need to register their apps, starting with Unity for both Android and iOS.</li> <li>For iOS, users must copy the bundle ID from the App Store Connect and from Google Play for Android.</li> <li>After registering both apps, users download the required configuration files: Google services.json for Android and Google service info.plist for iOS.</li> </ul>"},{"location":"RemoteNotifications.html#importing-configuration-files-into-unity","title":"Importing Configuration Files into Unity","text":"<ul> <li>Users are guided to open their Unity project and import the downloaded configuration files by dragging and dropping them into the assets root folder.</li> <li>Once the files are imported, users proceed to download the Firebase Unity SDK from Firebase and import the Firebase messaging package into Unity.</li> </ul>"},{"location":"RemoteNotifications.html#setting-up-firebase-messaging-in-unity","title":"Setting Up Firebase Messaging in Unity","text":"<ul> <li>After importing the Firebase messaging package, users must resolve any dependencies through the External Dependency Manager &lt; Android Resolver &lt; Resolve.</li> <li>After this create an empty game object named 'Remote Notifications' and add the necessary scripts for remote notifications [as mentioned in the video above].</li> <li>Users are instructed to drag and drop the remote notification script into the project, completing the Unity setup for Firebase messaging.</li> </ul>"},{"location":"RemoteNotifications.html#configuring-firebase-project-settings","title":"Configuring Firebase Project Settings","text":"<ul> <li>Users navigate back to the Firebase console to access the project settings for both Android and iOS apps, ensuring that the correct package name and app ID are displayed.</li> <li>For iOS, users must provide their Team ID and App Store ID, which can be retrieved from the App Store Connect.</li> <li>Once all information is filled in, users save the settings and proceed to configure cloud messaging for iOS by uploading the APN authentication key.</li> </ul>"},{"location":"RemoteNotifications.html#creating-the-apn-authentication-key","title":"Creating the APN Authentication Key","text":"<ul> <li>To create the APN authentication key, users visit the Apple Developer website and generate a new key, ensuring to check the Apple Push Notification Services checkbox.</li> <li>After configuring the key settings, users download the key and upload it to Firebase, along with the Key ID, completing the setup for remote notifications.</li> <li>The setup is confirmed as complete, and users can now proceed to test the notifications.</li> </ul>"},{"location":"RemoteNotifications.html#remote-notifications-script","title":"Remote Notifications Script","text":""},{"location":"SetupATT.html","title":"App Tracking Transparency Setup","text":""},{"location":"SetupATT.html#introduction","title":"Introduction","text":"<p>The tutorial focuses on adding an App Tracking Transparency (ATT) popup for iOS applications.It is essential to ensure that the platform is set to iOS before proceeding with the integration steps.</p>"},{"location":"SetupATT.html#setting-up-the-environment","title":"Setting Up the Environment","text":"<ul> <li>Users are instructed to navigate to the Tools section and select Mobile Monetization Pro and Integration Tool.</li> <li>The integration option for the ATT popup is selected, followed by downloading the necessary package from the Unity registry.</li> <li>It is necessary to search for and install the iOS 14 advertising support package from package manager.</li> </ul>"},{"location":"SetupATT.html#importing-required-assets","title":"Importing Required Assets","text":"<ul> <li>After installation, users need to access the samples and import the context screen.</li> </ul>"},{"location":"SetupATT.html#displaying-the-att-popup","title":"Displaying the ATT Popup","text":"<ul> <li>The first method to display the ATT popup involves showing it in the separate scene, specifically scene number zero.</li> <li>Users are guided to copy specific elements from the context screen sample and paste them into the Mobile Monetization Pro demo game scene.</li> <li>When the game starts, the ATT popup will appear, prompting the user to make a choice regarding tracking.</li> </ul>"},{"location":"SetupATT.html#building-and-testing-the-application","title":"Building and Testing the Application","text":"<ul> <li>To test the implementation, a build for the iOS device must be created by navigating to the file build settings.</li> <li>Once the project is built, users should open the Unity iPhone XC workspace and connect their iPhone.</li> <li>After selecting the appropriate category, the game can be installed on the iOS device for testing.</li> </ul>"},{"location":"SetupATT.html#user-interaction-with-the-popup","title":"User Interaction with the Popup","text":"<ul> <li>Upon launching the game, users will see the ATT prompt asking for permission to track their activity across other apps and websites.</li> <li>If the user selects 'allow' and restarts the game, the ATT popup will not reappear, thus confirming the user's choice.</li> </ul>"},{"location":"SetupATT.html#alternative-method-for-displaying-the-att-popup","title":"Alternative Method for Displaying the ATT Popup","text":"<ul> <li>An alternative method involves deleting the context screen sample and utilizing the iOS 14 advertising support context screen.</li> <li>Users can then access the Mobile Monetization Pro Tools and drag the ATT screen manager script into the scene.</li> <li>It is important to add this scene to the build settings to ensure the ATT popup appears in the first scene of the game.</li> </ul>"},{"location":"SetupATT.html#combining-att-and-gdpr-popups","title":"Combining ATT and GDPR Popups","text":"<ul> <li>If mobile ads are being used, it may also be necessary to implement a GDPR popup alongside the ATT popup.</li> <li>Users can specify that the ATT popup is shown in the first scene, while the GDPR popup can be displayed when the second scene loads.</li> <li>To facilitate this, users should check the option to load the next scene and provide the corresponding scene number in the build settings.</li> </ul>"},{"location":"SetupATT.html#final-testing-and-conclusion","title":"Final Testing and Conclusion","text":"<ul> <li>After configuring the scenes, users can create a build to test the functionality of the popups.</li> <li>When the first scene loads, the ATT popup will appear, and upon clicking 'next,' the second scene will load successfully without displaying the ATT popup again.</li> <li>The tutorial concludes with the successful implementation of the App Tracking Transparency popup in the game.</li> </ul>"},{"location":"SetupGDPR.html","title":"GDPR Setup","text":""},{"location":"SetupGDPR.html#introduction","title":"Introduction","text":"<p>In this video, you'll learn how to implement GDPR consent message in your mobile game using Mobile Monetization Pro.</p> <p>We cover: - Display a GDPR popup for players in supported regions - Request consent for personalized and non-personalized ads</p>"},{"location":"SetupGDPR.html#consent-controller-script","title":"Consent Controller Script","text":"Fields Info DisplayConsentSet to true to display the GDPR consent ResetConsentButtonButton to reset consent. UpdateConsentButtonButton to show user consent settings again. ErrorPopupGameObject with the error popup. ErrorTextError message for the error popup. targetScriptDrag a MonoBehaviour from the scene with public void methods. selectedMethodNameName of the public void method to call."},{"location":"SetupIAPInUnity.html","title":"In App Purchase Setup","text":""},{"location":"SetupIAPInUnity.html#introduction","title":"Introduction","text":"<p>In this video, you'll learn how to implement In App Purchase in your mobile game using Mobile Monetization Pro.</p>"},{"location":"SetupIAPInUnity.html#iap-manager-script","title":"IAP Manager Script","text":"Fields Info UIButtonThe button for the consumable item. PriceTextText to display the price of the consumable item. CanBuyInQuantityIf true, allows the item to be bought in a specific quantity. ProductIdThe product ID for the consumable item. AddScriptThe MonoBehaviour script to be added when the item is bought. FunctionToInvokeThe function to invoke when the item is purchased. FunctionParametersA list of parameters to pass to the function when invoking it. UIButtonThe button for the non-consumable item. PriceTextText to display the price of the non-consumable item. ProductIdThe product ID for the non-consumable item. RemoveAdsFromGameIf true, removes ads from the game when the non-consumable item is purchased. AddScriptThe MonoBehaviour script to be added when the item is bought. FunctionToInvokeThe function to invoke when the item is purchased. FunctionParametersA list of parameters to pass to the function when invoking it. CallFunctionOnRefundIf true, invokes the specified function when a refund occurs. RestartAdsOnRefundIf true, restarts ads on refund. AddScriptOnRefundThe MonoBehaviour script to be added on refund. FunctionToInvokeOnRefundThe function to invoke on refund. FunctionParametersForRefundA list of parameters to pass to the function on refund. UIButtonThe button for the subscription item. PriceTextText to display the price of the subscription. ProductIdThe product ID for the subscription item. AddScriptThe MonoBehaviour script to be added when the subscription is purchased. FunctionToInvokeForActivatingSubscriptionThe function to invoke for activating the subscription. FunctionToInvokeForDeactivatingSubscriptionThe function to invoke for deactivating the subscription. ActivationFunctionParametersA list of parameters to pass to the activation function when activating the subscription. DeactivationFunctionParametersA list of parameters to pass to the deactivation function when deactivating the subscription."},{"location":"SetupIAPOnStores.html","title":"Setup IAP on Google Play &amp; App Store","text":""},{"location":"SetupIAPOnStores.html#introduction","title":"Introduction","text":"<p>In this video, you'll learn how to set up In-App Purchases (IAP) for your mobile game on Google Play Console and App Store Connect. This step-by-step tutorial walks you through the process of creating in-app products and configuring them correctly on both platforms.</p> <p>What's Covered</p> <ul> <li> <p>Setting up in-app products on Google Play Console and App Store Connect</p> </li> <li> <p>Key settings and configurations required for successful IAP setup</p> </li> <li> <p>Connecting your in-app products with your Unity project</p> </li> </ul>"},{"location":"SetupIAPOnStores.html#setting-up-in-app-products-on-google-play-console","title":"Setting Up In-App Products on Google Play Console","text":"<p>To offer in-app purchases (IAP) on Google Play, you must configure your products in the Google Play Console.</p> <ul> <li> <p>Consumable Products: Items like in-game currency or consumables that are used once and can be purchased multiple times. These need to be set up on google play.</p> </li> <li> <p>Non-Consumable Products: Items that users buy once and own permanently, such as skins, weapons, or other unlockable content. You will need to configure these for one-time purchases.</p> </li> <li> <p>Subscriptions: If you're offering subscriptions, such as recurring premium content or services, you\u2019ll need to configure subscription products with renewal periods (e.g., weekly, monthly, yearly).</p> </li> </ul> <p>Google Play Console allows you to set the pricing, manage localized prices.</p>"},{"location":"SetupIAPOnStores.html#setting-up-in-app-products-on-app-store-connect","title":"Setting Up In-App Products on App Store Connect","text":"<p>For iOS applications, Apple uses App Store Connect for managing IAP products.</p> <ul> <li> <p>Consumables: Just like Google Play, consumable items on iOS are items that can be bought and used (like power-ups, in-game currency, etc.).</p> </li> <li> <p>Non-Consumables: These items are permanently available to the user after purchase, such as extra levels, skins, or game features.</p> </li> <li> <p>Subscriptions: If you\u2019re offering recurring services, such as a premium membership, these subscriptions are set up with renewal cycles and can provide users with ongoing access to content.</p> </li> </ul>"},{"location":"SetupIAPOnStores.html#managing-iap-products","title":"Managing IAP Products","text":"<p>Both stores allow you to edit or update your IAP products after they are live. For example, you can:</p> <ul> <li> <p>Add new in-app products or subscriptions.</p> </li> <li> <p>Modify prices or availability.</p> </li> <li> <p>Remove or discontinue old products.</p> </li> </ul> <p>This management is essential for keeping your game\u2019s monetization up to date and aligned with any seasonal changes or content updates.</p>"},{"location":"SetupIAPOnStores.html#testing-your-iap-products","title":"Testing Your IAP Products","text":"<p>Before going live with your in-app purchases, you need to test them thoroughly:</p> <p>Google Play Console: You can create test accounts and simulate purchases, allowing you to verify that everything is working as expected before making it available to the public.</p> <p>App Store Connect: Apple offers sandbox accounts for testing your in-app purchases. You can make purchases without actually being charged and test the full purchasing flow to ensure that everything is functioning properly.</p>"},{"location":"SupportMobileMonetizationPro.html","title":"\ud83d\udcde Contact","text":"<p>\ud83d\udcac Discord Support For faster assistance, join our Discord channel.  </p> <p>\ud83d\udce7 Email Support For any questions about our assets or inquiries before purchase, contact us by mail.</p>"},{"location":"VungleAds.html","title":"LiftOff Ads","text":""},{"location":"VungleAds.html#introduction","title":"Introduction","text":"<p>In this video, we take the first step in integrating LiftOff Ads(Vungle Ads) into your mobile game using Mobile Monetization Pro.</p> <p>You'll learn how to:</p> <ul> <li> <p>Set up your LiftOff ads account.</p> </li> <li> <p>Configure LiftOff SDK in Unity.</p> </li> <li> <p>Integrate and test vunLiftOffgle ads.</p> </li> </ul>"},{"location":"VungleAds.html#liftoff-ads-initializer","title":"LiftOff Ads Initializer","text":"Fields Info UseGDPRConsent Enable or disable GDPR consent prompt before initializing ads. IOSAppID Your iOS App ID provided by LiftOff (Vungle) dashboard. AndroidAppID Your Android App ID provided by LiftOff (Vungle) dashboard. AndroidInterstitalPlacementID Placement ID for Interstitial Ads on Android. AndroidBannerPlacementID Placement ID for Banner Ads on Android. AndroidRewardedPlacementID Placement ID for Rewarded Ads on Android. IOSInterstitalPlacementID Placement ID for Interstitial Ads on iOS. IOSBannerPlacementID Placement ID for Banner Ads on iOS. IOSRewardedPlacementID Placement ID for Rewarded Ads on iOS. ShowBannerAdsInStart Automatically show banner ads when the app starts. BannerSize Select the banner size for your ads. BannerPosition Select the banner position on the screen. EnableTimedInterstitalAds Enable automatic timed Interstitial ads after certain intervals. InterstitialAdIntervalSeconds Time interval (in seconds) between each Interstitial ad. ResetInterstitalAdTimerOnRewardedAd Reset Interstitial ad timer when a Rewarded ad is watched. DelayAdLoadingTime Delay time (in seconds) before loading ads after initialization. DelayBannerShowTime Delay time (in seconds) after loading a banner ad before showing it."},{"location":"VungleAds.html#liftoff-ads-manager","title":"LiftOff Ads Manager","text":"Fields Info ShowBannerAdButton Button that, when clicked, manually shows the banner ad. RewardedButton Button that triggers a rewarded ad and invokes a linked function after the ad is completed. script Script containing the function to invoke after the rewarded ad is completed. scriptName Name of the script associated with this function info (for reference). functionNames List of function names available in the assigned script. selectedFunctionIndex Index of the selected function from the available functions list. ActionButtonsToInvokeInterstitalAds Buttons that trigger interstitial ads when clicked. rewardedButtons List of rewarded buttons collected for setting up listeners. functions List storing reward button configurations and their corresponding function call information."}]}